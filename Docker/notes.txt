##### !!!!! --> Aula 02: Trabalhando com as imagens

> docker run hello-world
> docker run ubuntu
> docker ps
> docker ps -a

> docker run ubuntu echo "Ola Mundo"
> docker run -it ubuntu

### Executando novamente um container
# Fazemos isso pegando id do container a ser iniciado pelo "docker ps -a" e passando-o ao comando "docker start [CONTAINER ID]"

> docker start 05025384675e
> docker stop 05025384675e

##### --> Item 03: Layered File System

> docker ps -a
> docker rm [CONTAINER-ID]

# Para remover todos da lista

> docker container prune

### Listando e removendo imagens

> docker images
> docker rmi hello-world

##### --> Item 03: Praticando com o docker run

> docker run dockersamples/static-site

# Para não travar o terminal, podemos executá-lo sem atrelar o nosso terminal ao terminal do container para rodar em segundo plano:

> docker run -d dockersamples/static-site

### Acessando o site
# Veja que no comando "docker ps" informa que a porta 80 e 443 estão liberadas para acessar o container internamente na rede do Docker, porém temos que liberar para acessar a partir de nossa máquina. A flag -P fará com que o Docker atribua uma porta aleatória.

> docker run -d -P dockersamples/static-site

CONTAINER ID        IMAGE                       COMMAND                  CREATED             STATUS              PORTS                                           NAMES
5fde98f88a22        dockersamples/static-site   "/bin/sh -c 'cd /u..."   33 seconds ago      Up 32 seconds       0.0.0.0:32769->80/tcp, 0.0.0.0:32768->443/tcp   peaceful_mestorf

# Outra maneira de ver as portas:

> docker port 5fde98f88a22

### Nomeando um container
# A vantagem de dar um nome é não ficarmos dependentes dos ids e names aleatórios que o Docker atribui

> docker run -d -P --name nome-coisado dockersamples/static-site
> docker stop nome-coisado

### Definindo uma porta específica
# Em vez de -P usamos -p. Exemplo:

> docker run -d -p 12345:80 dockersamples/static-site

### Atribuindo uma variável de ambiente
# É usado o flag -e. Veja em localhost:12345 que a variável é usada para alterar o texto.

> docker run -d -p 12345:80 -e AUTHOR="Willian Antunes" dockersamples/static-site

### Parando todos os containers de uma só vez
# O comando "docker ps -q" lista apenas os IDs dos container rodando. Podemos passá-lo como parâmetro para parar todos de uma vez só:

> docker stop $(docker ps -q)

# O comando docker stop demora um pouco para ser executado pois ele espera 10 segundos para parar o container. Podemos diminuir esse tempo através da flag -t:

> docker stop -t 0 $(docker ps -q)

##### !!!!! --> Aula 03: Usando volumes

##### --> Item 01: Salvando dados com volumes

# O volume /var/www referenciado no comando abaixo foi criado para qual qual pasta do Docker Host? É possível saber pelo comando inspect.

> docker run -v "/var/www" --name nome-vol-01 ubuntu

> docker inspect nome-vol-01

# Veja que na saída informa que "/var/www" foi mapeado para "/var/lib/docker/volumes/b0ae2d1a9be51a1d4f75aff3c16d577962b73b15fba0c44f164bb8352ef64131/_data", ou seja, tudo que for escrito em "/var/www" no container irá para a pasta mapeada no Docker Host.

[
    {
        "Id": "70246bb2ed2f9ba70d572ebe02e9a7dd97ff7d0f37f39a1153b6c0e63b1e68bf",
        "Created": "2017-10-22T22:17:20.78287884Z",
        "Path": "/bin/bash",
        "Args": [],
        "State": {
            "Status": "exited",
            "Running": false,
            "Paused": false,
            "Restarting": false,
            "OOMKilled": false,
            "Dead": false,
            "Pid": 0,
            "ExitCode": 0,
            "Error": "",
            "StartedAt": "2017-10-22T22:17:21.112461498Z",
            "FinishedAt": "2017-10-22T22:17:21.17394532Z"
        },
        "Image": "sha256:747cb2d60bbecbda48aff14a8be5c8b913ca69318a6067e57c697f8a78dda06e",
        "ResolvConfPath": "/var/lib/docker/containers/70246bb2ed2f9ba70d572ebe02e9a7dd97ff7d0f37f39a1153b6c0e63b1e68bf/resolv.conf",
        "HostnamePath": "/var/lib/docker/containers/70246bb2ed2f9ba70d572ebe02e9a7dd97ff7d0f37f39a1153b6c0e63b1e68bf/hostname",
        "HostsPath": "/var/lib/docker/containers/70246bb2ed2f9ba70d572ebe02e9a7dd97ff7d0f37f39a1153b6c0e63b1e68bf/hosts",
        "LogPath": "/var/lib/docker/containers/70246bb2ed2f9ba70d572ebe02e9a7dd97ff7d0f37f39a1153b6c0e63b1e68bf/70246bb2ed2f9ba70d572ebe02e9a7dd97ff7d0f37f39a1153b6c0e63b1e68bf-json.log",
        "Name": "/nome-vol-01",
        "RestartCount": 0,
        "Driver": "overlay2",
        "Platform": "linux",
        "MountLabel": "",
        "ProcessLabel": "",
        "AppArmorProfile": "docker-default",
        "ExecIDs": null,
        "HostConfig": {
            "Binds": null,
            "ContainerIDFile": "",
            "LogConfig": {
                "Type": "json-file",
                "Config": {}
            },
            "NetworkMode": "default",
            "PortBindings": {},
            "RestartPolicy": {
                "Name": "no",
                "MaximumRetryCount": 0
            },
            "AutoRemove": false,
            "VolumeDriver": "",
            "VolumesFrom": null,
            "CapAdd": null,
            "CapDrop": null,
            "Dns": [],
            "DnsOptions": [],
            "DnsSearch": [],
            "ExtraHosts": null,
            "GroupAdd": null,
            "IpcMode": "shareable",
            "Cgroup": "",
            "Links": null,
            "OomScoreAdj": 0,
            "PidMode": "",
            "Privileged": false,
            "PublishAllPorts": false,
            "ReadonlyRootfs": false,
            "SecurityOpt": null,
            "UTSMode": "",
            "UsernsMode": "",
            "ShmSize": 67108864,
            "Runtime": "runc",
            "ConsoleSize": [
                0,
                0
            ],
            "Isolation": "",
            "CpuShares": 0,
            "Memory": 0,
            "NanoCpus": 0,
            "CgroupParent": "",
            "BlkioWeight": 0,
            "BlkioWeightDevice": [],
            "BlkioDeviceReadBps": null,
            "BlkioDeviceWriteBps": null,
            "BlkioDeviceReadIOps": null,
            "BlkioDeviceWriteIOps": null,
            "CpuPeriod": 0,
            "CpuQuota": 0,
            "CpuRealtimePeriod": 0,
            "CpuRealtimeRuntime": 0,
            "CpusetCpus": "",
            "CpusetMems": "",
            "Devices": [],
            "DeviceCgroupRules": null,
            "DiskQuota": 0,
            "KernelMemory": 0,
            "MemoryReservation": 0,
            "MemorySwap": 0,
            "MemorySwappiness": null,
            "OomKillDisable": false,
            "PidsLimit": 0,
            "Ulimits": null,
            "CpuCount": 0,
            "CpuPercent": 0,
            "IOMaximumIOps": 0,
            "IOMaximumBandwidth": 0
        },
        "GraphDriver": {
            "Data": {
                "LowerDir": "/var/lib/docker/overlay2/8d861542b761f720a08be0bd7bce0b9c7ae827191fe7011040b29e0372f555b2-init/diff:/var/lib/docker/overlay2/64ab69c9f91b0753a90b502ce8f9603392c9d25d0874219267d19a1d90cad6b5/diff:/var/lib/docker/overlay2/5c3e098bb9482420e28abdb791da56a6154d1a67f60821c4bbfb3a926b12d5f0/diff:/var/lib/docker/overlay2/3efa1269d8378d86fe0c17a95761e8f0e56fe73f2077bf291b9b7d97b0f165f5/diff:/var/lib/docker/overlay2/968ea8d2fda8b1af7e4f3908d21b3b6c091fb5c734fd97649bd3c0227794b307/diff:/var/lib/docker/overlay2/fef0a3d5acafa3d26be2e07998a2808bede033bf892398ca3ef6d4078169cebf/diff",
                "MergedDir": "/var/lib/docker/overlay2/8d861542b761f720a08be0bd7bce0b9c7ae827191fe7011040b29e0372f555b2/merged",
                "UpperDir": "/var/lib/docker/overlay2/8d861542b761f720a08be0bd7bce0b9c7ae827191fe7011040b29e0372f555b2/diff",
                "WorkDir": "/var/lib/docker/overlay2/8d861542b761f720a08be0bd7bce0b9c7ae827191fe7011040b29e0372f555b2/work"
            },
            "Name": "overlay2"
        },
        "Mounts": [
            {
                "Type": "volume",
                "Name": "b0ae2d1a9be51a1d4f75aff3c16d577962b73b15fba0c44f164bb8352ef64131",
                "Source": "/var/lib/docker/volumes/b0ae2d1a9be51a1d4f75aff3c16d577962b73b15fba0c44f164bb8352ef64131/_data",
                "Destination": "/var/www",
                "Driver": "local",
                "Mode": "",
                "RW": true,
                "Propagation": ""
            }
        ],
        "Config": {
            "Hostname": "70246bb2ed2f",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": true,
            "AttachStderr": true,
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": [
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
            ],
            "Cmd": [
                "/bin/bash"
            ],
            "ArgsEscaped": true,
            "Image": "ubuntu",
            "Volumes": {
                "/var/www": {}
            },
            "WorkingDir": "",
            "Entrypoint": null,
            "OnBuild": null,
            "Labels": {}
        },
        "NetworkSettings": {
            "Bridge": "",
            "SandboxID": "9aa4e6a011b1999a5b0a876841f9ec7e3c1da0613115d08708505f44bd534583",
            "HairpinMode": false,
            "LinkLocalIPv6Address": "",
            "LinkLocalIPv6PrefixLen": 0,
            "Ports": {},
            "SandboxKey": "/var/run/docker/netns/9aa4e6a011b1",
            "SecondaryIPAddresses": null,
            "SecondaryIPv6Addresses": null,
            "EndpointID": "",
            "Gateway": "",
            "GlobalIPv6Address": "",
            "GlobalIPv6PrefixLen": 0,
            "IPAddress": "",
            "IPPrefixLen": 0,
            "IPv6Gateway": "",
            "MacAddress": "",
            "Networks": {
                "bridge": {
                    "IPAMConfig": null,
                    "Links": null,
                    "Aliases": null,
                    "NetworkID": "12e3953aa1a5ab5c44d54625e0bb2d6fd94953805d91d4c2d3e9acef5072ab21",
                    "EndpointID": "",
                    "Gateway": "",
                    "IPAddress": "",
                    "IPPrefixLen": 0,
                    "IPv6Gateway": "",
                    "GlobalIPv6Address": "",
                    "GlobalIPv6PrefixLen": 0,
                    "MacAddress": "",
                    "DriverOpts": null
                }
            }
        }
    }
]

# Simulação de escrita no Desktop e visualização do arquivo no container.

> docker run -it -v "/home/willian/Desktop:/var/www" ubuntu

##### --> Item 04: Rodando código em um container

# A pasta mapeada deverá conter o projeto de exemplo descompactado. Como ele sobe a porta 3000, é necessário mapear uma do Docker Host para acesso. A flag -w representa Working Directory, isto é, qual diretório o terminal iniciará para executar o comando "npm start", uma vez que é dentro de "/var/www" que o arquivo package.json.

> docker run -p 8080:3000 -v "/home/willian/Desktop/volume-exemplo:/var/www" -w "/var/www" node npm start

# Poderíamos desenvolver em node e testar usando container (sem instalar o node) por exemplo rodando a partir da pasta atual executando o comando pwd:

> docker run -p 8080:3000 -v "$(pwd):/var/www" -w "/var/www" node npm start

##### !!!!! --> Aula 04: Construindo nossas próprias imagens

# Para dizer a imagem-base que queremos, utilizamos a palavra FROM mais o nome da imagem.
# FROM node
# Para informar a versão, colocamos depois da imagem, por padrão é considerado latest caso não seja informado.
# FROM node:latest

# Outra instrução que é comum colocarmos é quem cuida, quem criou a imagem, através do MAINTAINER:
# FROM node:latest
# MAINTAINER Willian Antunes

# Para colocar tudo que está dentro da pasta do Dockerfile e copiar para /var/www, ficaria assim:
# FROM node:latest
# MAINTAINER Willian Antunes
# COPY . /var/www

# No projeto, já temos as suas dependências dentro da pasta node_modules, porém é melhor o node instalar as dependências pois podem estar desatualizadas. Para executar um comando usamos RUN:
# FROM node:latest
# MAINTAINER Willian Antunes
# COPY . /var/www
# RUN npm install

# Toda imagem possui um comando que é executado quando ela inicia. O comando "npm start" foi utilizado na linha 286 neste arquivo. Para isso, utilizamos o ENTRYPOINT, que executará o comando que quisermos assim que o container for carregado:
# FROM node:latest
# MAINTAINER Willian Antunes
# COPY . /var/www
# RUN npm install
# ENTRYPOINT npm start

# Também podemos passar o comando como se fosse em um array, por exemplo ["npm", "start"], ambos funcionam.

# Falta colocarmos a porta em que a aplicação executará, a porta em que ela ficará exposta. Para isso, utilizamos o EXPOSE:
# FROM node:latest
# MAINTAINER Willian Antunes
# COPY . /var/www
# RUN npm install
# ENTRYPOINT npm start
# EXPOSE 3000

# Para funcionar o comando "npm start" precisa ser executado dentro de /var/www, usamos o comando WORKDIR. Assim que copiarmos o projeto, dizemos em qual diretório iremos trabalhar;
# FROM node:latest
# MAINTAINER Willian Antunes
# COPY . /var/www
# WORKDIR /var/www
# RUN npm install
# ENTRYPOINT npm start
# EXPOSE 3000

# O Dockerfile acima é análogo ao comando da linha 286.

### Criando a imagem

# Por padrão é considerado Dockerfile o nome do arquivo, mas poderia ser algumaCoisa.dockerfile, a flag -f permite informar o nome do arquivo. A flag -t serve para passar a tag da imagem, por exemplo wantunes/aluranode. O último parâmetro é o local do arquivo Dockerfile, no caso o próprio diretório que é representado por "."

> docker build -f Dockerfile -t wantunes/aluranode .

### Criando um container a partir da nossa imagem

> docker run -d -p 8080:3000 wantunes/aluranode

##### !!!!! --> Aula 05: Networking no Docker

# No Docker, por padrão, já existe uma default network. Isso significa que, quando criamos os nossos containers, por padrão eles funcionam na mesma rede: 172.168.0.1, 172.168.0.2, 172.168.0.3 e por aí vai...

# Faça testes usando "docker inspect {id-container}" e verificando o ip do container, ping, etc.	

# Obs.: Na rede padrão do Docker, só podemos realizar a comunicação utilizando IPs, mas se criarmos a nossa própria rede, podemos "batizar" os nossos containers, e realizar a comunicação entre eles utilizando os seus nomes.

### Comunicação entre containers utilizando os seus nomes

> docker network create --driver bridge minha-rede

> docker run -it --name primeiro-ubuntu --network minha-rede ubuntu

> docker run -it --name segundo-ubuntu --network minha-rede ubuntu

# Obter endereço IP distribuído pela rede minha-rede no container 2
> docker exec -it segundo-ubuntu hostname -i

# Agora, no segundo-ubuntu, use o ping e teste a comunicação com o primeiro-ubuntu.

> apt-get update && apt-get install -y iputils-ping
> ping primeiro-ubuntu

# Para excluir rede:

> docker network rm minha-rede

##### --> Item 04: Pegando dados de um banco -> https://cursos.alura.com.br/course/docker-e-docker-compose/task/29441

> docker pull douglasq/alura-books:cap05
> docker pull mongo

> docker run -d --name meu-mongo --network minha-rede mongo
> docker run --network minha-rede -d -p 8080:3000 douglasq/alura-books:cap05

# Agora, acessamos a página http://localhost:8080/seed/ para salvar os livros no banco de dados. Após isso, acessamos a página http://localhost:8080/ e vemos os dados livros são extraídos do banco e são exibidos na página. Para provar isso, podemos parar a execução do meu-mongo e atualizar a página, veremos que nenhum livro mais será exibido.

##### !!!!! --> Aula 06: Entendendo o Docker Compose

> docker-compose build
> docker-compose up
> docker exec -it alura-books-1 ping node2
> docker-compose up -d
> docker-compose logs
> docker-compose down
> docker-compose --help

Define and run multi-container applications with Docker.

Usage:
  docker-compose [-f <arg>...] [options] [COMMAND] [ARGS...]
  docker-compose -h|--help

Options:
  -f, --file FILE             Specify an alternate compose file (default: docker-compose.yml)
  -p, --project-name NAME     Specify an alternate project name (default: directory name)
  --verbose                   Show more output
  -v, --version               Print version and exit
  -H, --host HOST             Daemon socket to connect to

  --tls                       Use TLS; implied by --tlsverify
  --tlscacert CA_PATH         Trust certs signed only by this CA
  --tlscert CLIENT_CERT_PATH  Path to TLS certificate file
  --tlskey TLS_KEY_PATH       Path to TLS key file
  --tlsverify                 Use TLS and verify the remote
  --skip-hostname-check       Don't check the daemon's hostname against the name specified
                              in the client certificate (for example if your docker host
                              is an IP address)
  --project-directory PATH    Specify an alternate working directory
                              (default: the path of the Compose file)

Commands:
  build              Build or rebuild services
  bundle             Generate a Docker bundle from the Compose file
  config             Validate and view the Compose file
  create             Create services
  down               Stop and remove containers, networks, images, and volumes
  events             Receive real time events from containers
  exec               Execute a command in a running container
  help               Get help on a command
  images             List images
  kill               Kill containers
  logs               View output from containers
  pause              Pause services
  port               Print the public port for a port binding
  ps                 List containers
  pull               Pull service images
  push               Push service images
  restart            Restart services
  rm                 Remove stopped containers
  run                Run a one-off command
  scale              Set number of containers for a service
  start              Start services
  stop               Stop services
  top                Display the running processes
  unpause            Unpause services
  up                 Create and start containers
  version            Show the Docker-Compose version information